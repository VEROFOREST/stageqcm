{% block body %}
<div class="container">
  <h1 class="show">Questionnaire</h1>

  <form id="questionnaire-form" method="post" action="">
     <label for="cars">Matière:</label>

  <select name="matiere" id="matiere">
        <option value="volvo">Volvo</option>
        <option value="saab">Saab</option>
        <option value="mercedes">Mercedes</option>
        <option value="audi">Audi</option>
  </select>
      
      <div class="form-row">
        <div class="form-group col-md-6">
          <label for="inputBaremeTot">Barême total</label>
          <input type="text" class="form-control" id="inputBaremeTot" name="inputBaremeTot"value="">
        </div>
      
     
        <div class="form-group col-md-6">
          <label for="inputStartedAt">commence le </label>
          <input type="date" class="form-control" id="inputStartedAt" name="inputStartedAt
          " value="">
        </div>
      </div>
      
     
      <div class="form-row">
        <div class="form-group col-md-6">
          <label for="inputStoppedAt">Fini le </label>
          <input type="date" class="form-control" id="inputStoppedAt" name="inputStoppedAt" value="" >
        </div>
      
      
        <div class="form-group col-md-6">
          
           <label for="inputNbreQuestions">Nombre de questions </label>
          <input type="text" class="form-control" id="inputNbreQuestions" name="inputNbreQuestions" value="">
        </div>
      </div>
      <div class="form-row">
        <div class="form-group col-md-12">
          <label for="inputNumero">N° : </label>
          <input type="textarea" class="form-control" id="inputNumero" name="inputNumero" value="" >       
        </div>
      </div>

      <div class="form-row">
        <div class="form-group col-md-6">
          <label for="inputLibelle">Libellé</label>
          <input type="text" class="form-control" id="inputLibelle" name="inputLibelle" value="">
        </div>
        <div class="form-group col-md-6">
          <label for="inputBaremeQuest">nombre de point(s):</label>
          <input type="text" class="form-control" id="inputBaremeQuest" id="inputBaremeQuest" value="">
        </div>
      </div>
      <div class="form-group">
        <label for="inputTypeQuest">type de question:</label>
        <select name="inputTypeQuest" id="inputTypeQuest">
          <option value="{{typerep}}">Volvo</option>
          <option value="saab">Saab</option>
          <option value="mercedes">Mercedes</option>
          <option value="audi">Audi</option>
      </select>
     </div>
      <div class="form-row">
        <div class="form-group col-md-6">
          <label for="inputNbreChoix">nombre de choix possible(s)</label>
          <input type="text" class="form-control"  id="inputNbreChoix" name="inputNbreChoix" value="">
        </div>
        <div class="form-group col-md-6">
          <label for="inputReponse"> libellé Reponse :</label>
          <input type="textearea" id="inputReponse" class="form-control"value="">
        </div>
      </div>
       <div class="form-row">
        <div class="form-group col-md-12">
          <div class="form-check">
            
            <input class="formCheckReponse" name="choixReponse"  type="radio" value="1" id="choixRep1" checked="checked">
            <label class="form-check-label " for="choixRep1">
              Choix N°1
            </label>
          
          </div>
          <div class="form-check">
            
            <input class="formCheckReponse" name="choixReponse" type="radio" value="2" id="choixRep2" >
            <label class="form-check-label" for="choixRep2">
             Choix N°2

            </label>
          </div>
          <div class="form-check">
            
            <input class="formCheckReponse"name="choixReponse"  type="radio" value="3" id="choixRep3" >
            <label class="form-check-label" for="choixRep3">
            Choix N°3

            </label>
          </div>
          <div class="form-check">
            
            <input class="formCheckReponse" name="choixReponse"  type="radio" value="4" id="choixRep4" >
            <label class="form-check-label" for="choixRep4">
            choix 4
            </label>
          </div>
          <div class="form-check">
            
            <input class="formCheckReponse"name="choixReponse" type="radio" value="5" id="choixRep5" >
            <label class="form-check-label" for="choixRep5">
            choix5

            </label>
            </div>
        
        <div class="form-check">
          <label for="checkJust"> bonne réponse </label>
          <input class="form-check-input-left" type="checkbox" id="checkJust" checked>
        </div>
        </div>
      
       </div>
      </div>
    
  
    <button id="preinscription" type="submit" class="btn btn-primary btn-lg float-right">Envoyer<svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-chevron-double-right" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
      <path fill-rule="evenodd" d="M3.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L9.293 8 3.646 2.354a.5.5 0 0 1 0-.708z"/>
      <path fill-rule="evenodd" d="M7.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L13.293 8 7.646 2.354a.5.5 0 0 1 0-.708z"/>
      </svg>
    </button>
      

  </form>
  

    {# <a href="{{ path('pre_inscription_index') }}">back to list</a> #}
</div>
{% endblock %}

-------------------------------------------------------------------------



 {# {{form_row(quest)}} #}

                    {# {{form_label(quest.numero, 'N°', { 'attr': {'class': 'foo'} } )}} 
                    {{ form_widget(quest.numero,{'attr': {'class': "form-control",}} )}}
                    {{ form_label(quest.libelle,'Libellé de la question', { 'attr': {'class': 'foo'} } )}} 
                    {{ form_widget(quest.libelle,{'attr': {'class': "form-control",}} )}}
                    {{ form_label(quest.baremeQuestion,'Barème de la question', { 'attr': {'class': 'foo'}} )}} 
                    {{ form_widget(quest.baremeQuestion,{'attr': {'class': "form-control",}})}}
                    {{ form_label(quest.typeReponse,'Est ce QCM ou réponse libre ?', { 'attr': {'class': 'foo'}})}} 
                    {{ form_widget(quest.typeReponse,{'attr': {'class': "form-control",}})}}
                    {{ form_label(quest.nbreChoix,'si QCM, nombre de choix possible',{ 'attr': {'class': 'foo'}})}} 
                    {{ form_widget(quest.nbreChoix,{'attr': {'class': "nbreChoix",}})}} #}
                        {# {{dump(form.questions.vars.prototype.children['reponseProfs'].vars.prototype)}} #}
             
                         {# <div class="row reponsewrapper">   #}
                         
                               {# {{ form_label(rep.libelleReponse,'Libellés reponse',{ 'attr': {'class': 'foo'}})}} 
                                {{ form_widget(rep.libelleReponse,{'attr': {'class': "form-control",}})}}
                                {{ form_label(rep.isJust,'Réponse(s) possibles',{ 'attr': {'class': 'foo'}})}} 
                                {{ form_widget(rep.isJust,{'attr': {'class': "form-check",}})}}  #}
                            {# <div class=" col-6">
                                <a href="" class="jsaddreponse">
                                <span class="btn btn-lg btn-primary" > Ajouter une reponse</span>
                                </a>
                            </div>
                        #}
                            {# </div> #}

                            {# <div class=" col-6">
                    <a href="" class="jsaddquestion">
                    <span class="btn btn-lg btn-primary" > Ajouter une question</span>
                    </a>
                    </div> #}
                    -----------------------------------------------------
<?php

namespace App\Controller;

use App\Entity\ReponseEleve;
use App\Entity\User;
use App\Repository\QuestionnaireRepository;
use App\Repository\QuestionRepository;
use App\Repository\ReponseProfRepository;
use App\Repository\SessionRepository;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;



class ReponseEleveController extends AbstractController
{
    /**
     * @IsGranted("ROLE_USER")
     * @Route("/reponse/eleve", name="reponse_eleve")
     */
    public function index()

    {
        // $test=$questionRepository->findAll();
       
        return $this->render('reponse_eleve/index.html.twig', [
            
            'controller_name' => 'ReponseEleveController',
        ]);
    }
    
    /**
     * @IsGranted("ROLE_USER")
     * @Route("/reponse/eleve/new/{id}", name="reponse_eleve_new", methods={"GET","POST"})
     */
    public function new(User $user,Request $request,QuestionnaireRepository $questionnaireRepository,
     QuestionRepository $questionRepository, ReponseProfRepository $reponseProfRepository )

    {
        // recherche l'id de la session correspondant à eleve connectée
       $sessionsEleve= $user->getSessions();
        foreach ($sessionsEleve as $sessionEleve) {
           $idsession= $sessionEleve->getId();
        
        }
        
    //   recherche du questionnaire, questions et reponses correspondant à cette id, 
       $questionnaireSession = $questionnaireRepository->findOneBySession($idsession);
       $questionsQuestionnaire = $questionnaireSession->getQuestions();
    
        return $this->render('reponse_eleve/index.html.twig', [
            'user'=>$user,
            'questionnaireEleve'=>$questionnaireSession,
            'questions'=>$questionsQuestionnaire,
            
            
           'controller_name' => 'ReponseEleveController',
        ]);
    }
    /**
     * @IsGranted("ROLE_USER")
     * @Route("/reponse/eleve/store/{id}", name="reponse_eleve_store", methods={"GET","POST"})
     */
    public function store(User $user,Request $request,QuestionnaireRepository $questionnaireRepository,
     QuestionRepository $questionRepository, ReponseProfRepository $reponseProfRepository,SessionRepository $sessionRepository )

     {  
         // recherche l'id de la session correspondant à eleve connectée
            $sessionsEleve= $user->getSessions();
                foreach ($sessionsEleve as $sessionEleve) {
                $idsession= $sessionEleve->getId();
                
                }
        
            //   recherche du questionnaire, questions et reponses correspondant à cette id, 
            $questionnaireSession = $questionnaireRepository->findOneBySession($idsession);
            $questionsQuestionnaire = $questionnaireSession->getQuestions();
            
        
        $sessionEleve=$request->get('session');
        $idSessionEleve = $sessionRepository->findOneById(['id'=>$sessionEleve]);
        

        $question = $request->get('question');
        // recupération des réponses de l'éleve sous forme d'array
        $reponsesform =$request->get('reponseEleve');
        // pour chaque réponse de l'éléve, on va créer un nouvel objet 
        $entityManager = $this->getDoctrine()->getManager();
        foreach ($reponsesform as $ReponseChoice) {
        
             $reponseDefinitiveEleve = new ReponseELeve();
                // set des colonnes de la table reponseEleve
             $reponseDefinitiveEleve->setSession($idSessionEleve);
            //  on remonte à la réponse prof pour avoir le lien
             $idReponseChoixProf = $reponseProfRepository->findOneById($ReponseChoice);
            //  dd($idReponseChoixProf);
                //set la réponseprof, qui nous permettra de remonter à la question
             $reponseDefinitiveEleve->setReponseProf($idReponseChoixProf);
                //   on va rechercher la réponse juste du prof
            // $reponseProfOk = $idReponseChoixProf->getIsJust();
            
            // // si cette réponse est notée comme fausse on set la réponse de l'éleve à fausse et inversement

            // if ($reponseProfOk === false){
            //     $reponseDefinitiveEleve->setIsJust(false);
            //     //  $this->addFlash('danger', 'mauvaise réponse !');
            // }
            // else $reponseDefinitiveEleve->setIsJust(true);
            // // si la réponse est juste, on lui applique le bareme de la question sinon on met 0
            // if ($reponseDefinitiveEleve->getIsJust() === true){
                    
            //         $notequestion=$idReponseChoixProf->getQuestion()->getBaremeQuestion();
            //     $reponseDefinitiveEleve->setNoteQuestion($notequestion);
            // }
            // else $reponseDefinitiveEleve->setNoteQuestion(0);
               
            // on va chercher le libelle de la réponse du prof et on le remet dans la libelle reponse du prof
            $libellereponseDefinitiveEleve=$idReponseChoixProf->getLibelleReponse();
            $reponseDefinitiveEleve->setReponseEleve($libellereponseDefinitiveEleve);             
            $entityManager->persist($reponseDefinitiveEleve);
           
        }
             
            $entityManager->flush();
                // $this->addFlash('success', 'Bonne Réponse !');
        // dd($reponseEleve);
        
         return $this->render('reponse_eleve/index.html.twig', [
             'user'=>$user,
            'questionnaireEleve'=>$questionnaireSession,
            'questions'=>$questionsQuestionnaire,
            
            'reponsesEleve'=> $reponseDefinitiveEleve 

         ]);

     }
    
}
---------------------------------------------------------------------------------------
{% extends 'base.html.twig' %}

{% block title %}Reponses au questionnaire{% endblock %}

{% block body %}
<div class="container">
  <h1 class="show">Questionnaire  {{questionnaireEleve.matiere.nom}}</h1>
  
  <form id="reponseEleve-form" method="post" action="{{path("reponse_eleve_store",{'id':user.id})}}">
   
      <div class="form-row">
        <div class="form-group col-md-6">
          <label for="inputFormation">Nom </label>
          <input type="text" class="form-control" id="inputFormation" value="{{user.nom}}">
        </div>
      
     
        <div class="form-group col-md-6">
          <label for="inputDuree">Prénom</label>
          <input type="text" class="form-control" id="inputDuree" value="{{user.prenom}}">
        </div>
      </div>
      
     
      <div class="form-row">
        <div class="form-group col-md-6">
          <label for="inputSession">Session</label>
        <input name="session" type="hidden" id="input{{questionnaireEleve.session.id}}" value="{{questionnaireEleve.session.id}}">
         {# {{ dump(questionnaireEleve.session.id)}} #}
          <input  type="text" class="form-control" id="inputSession" value="{{questionnaireEleve.session.nom}}" >
        </div>
      
      
        <div class="form-group col-md-6">
          
           <label for="inputLieu">barème total</label>
          <input type="text" class="form-control" id="inputLieu" value="{{questionnaireEleve.baremeTot}}">
        </div>
      </div>
      <div class="form-row">
        <div class="form-group col-md-12">
          <label for="inputContenu">Nombre de questions </label>
          <input type="textarea" class="form-control" id="inputContenu" value="{{questionnaireEleve.nbreQuestion}}" >       
        </div>
      </div>
      
    {% for question in questions %}
     
      
      <div id="question{{question.id}}" style="display:block">
          <div class="form-group col-md-12 question">
            <label for="inputNom">Question n° {{question.numero}}</label>
          
            <input  type="text" class="form-control" id="inputNom{{question.id}}" value="{{question.libelle}}">
          </div>
        {% for reponse in question.reponseProfs %}
        <div class="form-row">
            <input name="question" type="hidden" id="input{{question.id}}" value="{{question.id}}">
            <div class="custom-control custom-checkbox">
            {% set checked ='' %}
            <input   type="checkbox" name= "reponseEleve[{{question.id}}][]" class="custom-control-input" id="customCheck{{reponse.id}}" value="{{reponse.id}} {% if checked %} checked="checked"{% endif %}" onchange=" getcheckrep(this)" >
        
          
            {{dump(reponse.id)}}
              <label class="custom-control-label" for="customCheck{{reponse.id}}">{{reponse.libelleReponse}}</label>
             
            </div>
        </div>
      
        {% endfor %}
      <div id= "codeRep" ></div>
      </div>
        {%  if (question.id < questionnaireEleve.nbreQuestion) %}
          <a onclick="gotoNextQuestion();" id="questionsuivante" class="btn btn-primary" href="{{user.id}}#inputNom{{question.id+1}}" >Question<svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-chevron-double-right" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
      <path fill-rule="evenodd" d="M3.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L9.293 8 3.646 2.354a.5.5 0 0 1 0-.708z"/>
      <path fill-rule="evenodd" d="M7.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L13.293 8 7.646 2.354a.5.5 0 0 1 0-.708z"/>
      </svg></a>
        {% endif %}
      
    {% endfor %}

     <div id="btn submit">
    <button id="reponseEleve" type="submit" class="btn btn-primary btn-lg float-right">Envoyer<svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-chevron-double-right" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
      <path fill-rule="evenodd" d="M3.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L9.293 8 3.646 2.354a.5.5 0 0 1 0-.708z"/>
      <path fill-rule="evenodd" d="M7.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L13.293 8 7.646 2.354a.5.5 0 0 1 0-.708z"/>
      </svg>
    </button>
      
    </div>
  </form>
  


{% endblock %} 

// lorsque le dom se charge, on effectue la fonction "main"
document.readyState === "loading"
  ? window.addEventListener("DOMContentLoaded", main)
  : main();
function main() {
  // bouton pour ajouter une question
  const boutonQuestion = `\
    <div class="col-12">
        <button class="btn-primary" type="button" class="add_Question_link">
            Ajouter une question
        </button>
    </div>
    `;
  // on récupère le div des "questions"
  const $collectionQuestion = document.querySelector("div.row.questionwrapper");
  // on injecte dans le html le bouton d'ajout des questions dans le HTML avant le formulaire de question qu'on va demander de reproduire.
  $collectionQuestion.insertAdjacentHTML("afterbegin", boutonQuestion);
  // la div du formulaire question est le 1re enfant du formulaire question et succède le bouton "ajout"
  $nouveau = $collectionQuestion.firstElementChild;
  $boutonAjouterQuestion = $nouveau.firstElementChild;

  // $collectionQuestion.setAttribute(
  //   'data-index',
  //   $collectionQuestion.querySelectorAll('input').length
  // );
  //  sur le click du bouton d'ajout, on effectue la fonction d'ajout de la div et dans l'ordre spécifié(1er enfant)
  $boutonAjouterQuestion.addEventListener("click", () =>
    addQuestionForm($collectionQuestion, $nouveau)
  );
}
// fonction d'ajout du formulaire de question avec les deux paramètres précèdents 
function addQuestionForm($collectionQuestion, $nouveau) {
  // on crée la variable du bouton ajout de réponse dans ce form question
  const boutonReponse = `\
    <div class="col-12">
        <button class="btn-primary" type="button" class="add_Reponse_link">
            Ajouter une Reponse
        </button>
    </div>
    `;
  // on récupére les data du prototype qui est une string...
  const prototype = $collectionQuestion.getAttribute("data-prototype");
  // on récupère les data de l'index qui en général est à 0 (il s'agit du nombre de form question avant le click)
  const index = $collectionQuestion.getAttribute("data-index");
// dans la string généré en HTML par le data prototype, on remplace __NAME__(le nom du prototype) 
  // par le nombre de"formquestion" recupéré au dessus.
  const newForm = prototype.replace(/__name__/g, index);

//  un fois le 1er form question généré, on set le nouvel index en l'incrémentant de 1.
  $collectionQuestion.setAttribute("data-index", +index + 1);
  // console.log(index);
// avant la fin du formulaire question on insère le bouton reponse qui succédera au form-reponse et qui 
// lui même succèdera au form question qui lui succédera au bouton question.
  $nouveau.insertAdjacentHTML("beforeend", newForm);
  const $question = $nouveau.lastElementChild;
  $nouveau.insertAdjacentHTML("beforeend", boutonReponse);
  $boutonAjouterReponse = $nouveau.lastElementChild.firstElementChild;
  // au click de ce bouton reponse on fait la fonction add reponse avec les paramètres 
  // que sont la div comprenant le prototype, la position du formulaire(dernier enfant) 
  // et le compteur (nouvellement seté)de la question.
  $boutonAjouterReponse.addEventListener("click", () =>
    addReponseForm(
      document.querySelector("div.row.questionwrapper"),
      $question,
      index
    )
  );
}
// fonction d'ajout du formulaire de réponse avec les trois paramètres cités ci dessus.
function addReponseForm($collectionReponse, $question, indexQuestion) {
  // On récupére les datas du prototype spécial réponse (renommés pour le différencier du proto question)
  const prototype = $collectionReponse.getAttribute("data-prototype-reponse");

  //  on récupére le compteur mais cette fois du bloc formulaire reponse (seté à 0)
  const indexRep = $collectionReponse.getAttribute("data-index-reponse");

  // remplace le nom  '_rep_prot__'dans le prototype's HTML avec le nombre de l'indexRep
  // et remplace le nom '_name_' avec le paramètre passé dans la fonction.
  const newForm = prototype
    .replace(/__rep_prot__/g, indexRep)
    .replace(/__name__/g, indexQuestion);

//  on incrémente le compteur de réponse et on le set avant chaque click
  $collectionReponse.setAttribute("data-index-reponse", +indexRep + 1);
//  on insère le formulaire réponse dans la div en position avant le bouton reponse.

  $question.insertAdjacentHTML("beforeend", newForm);
}
// date picker
  jQuery(document).ready(function() {
            $('.js-datepicker').datepicker();
        });

// modal error
  $('.alert').alert()
  $('#myModal').on('shown.bs.modal', function () {
  $('#myInput').trigger('focus')
  })
// show next question
// function gotoNextQuestion(){
  
//   var questionDiv = document.getElementById("question")
//   console.log(questionDiv)
//   var nbrequestion =document.getElementById("inputLieu")
//   var valeurnbrequestion =nbrequestion.value
//   if(questionDiv.style.display = 'none'){
//   questionDiv.style.display = 'block';
  
//   }
//   else
//   questionDiv.style.display ='none';

// }
function getQuestion(checkQuestion){

   console.log(checkQuestion.id);



}

function getcheckrep(checkEleve){
 var valueRep =checkEleve.value
 var i=checkEleve.id
  var codeRep = document.getElementById("codeRep");
 
//  var idRep='question'+i
//  var  questionDiv = document.getElementById("question"+idRep)


  
    if(valueRep == 1) {

      // alert ( "bonne réponse");
      
      addClassJust();
     }
    else 
      // alert ( "mauvaise réponse");

    addClassWrong();
}
 function addClassJust(){
  
  
   var codeRep = document.getElementById("codeRep");
        //  console.log(codeRep)

       return codeRep.classList.add('just')  
   
  }
  function addClassWrong(){
    var y=1
    var nbrequestion =document.getElementById("inputLieu")
    // console.log(nbrequestion.value)
  
     
      var codeRep = document.getElementById("codeRep")
      
      // console.log(codeRep)
       return codeRep.classList.add('wrong')  
   }

 




